
UARTDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000266  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000007bc  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a39  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
 */


#include "uart.h"

int main (void) {
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x8>
  8a:	00 d0       	rcall	.+0      	; 0x8c <main+0xa>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
	UARTConfig uart = { UART_8_BITS, UART_NO_PARITY, UART_1_STOP_BIT, UART_RX_TX };
  90:	83 e0       	ldi	r24, 0x03	; 3
  92:	8a 83       	std	Y+2, r24	; 0x02
  94:	1b 82       	std	Y+3, r1	; 0x03
  96:	1c 82       	std	Y+4, r1	; 0x04
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	8d 83       	std	Y+5, r24	; 0x05
	uint8 t;
	UART_init(&uart);
  9c:	ce 01       	movw	r24, r28
  9e:	02 96       	adiw	r24, 0x02	; 2
  a0:	0e 94 65 00 	call	0xca	; 0xca <UART_init>

	t = UART_receiveByte();
  a4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <UART_receiveByte>
  a8:	89 83       	std	Y+1, r24	; 0x01

	DDRA |= 0xff;
  aa:	ea e3       	ldi	r30, 0x3A	; 58
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	ea e3       	ldi	r30, 0x3A	; 58
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	80 83       	st	Z, r24

	PORTA = t;
  b8:	eb e3       	ldi	r30, 0x3B	; 59
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	80 83       	st	Z, r24

	UART_sendString("I am another Micro Like you!");
  c0:	80 e6       	ldi	r24, 0x60	; 96
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <UART_sendString>
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0x46>

000000ca <UART_init>:

#include "uart.h"

#define BAUD_PRESCALE (((F_CPU / (UART_BAUDRATE * 8UL))) - 1)

void UART_init(const UARTConfig * const config) {
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	00 d0       	rcall	.+0      	; 0xd0 <UART_init+0x6>
  d0:	00 d0       	rcall	.+0      	; 0xd2 <UART_init+0x8>
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	9c 83       	std	Y+4, r25	; 0x04
  d8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 baudRate = BAUD_PRESCALE;
  da:	8c e0       	ldi	r24, 0x0C	; 12
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	9a 83       	std	Y+2, r25	; 0x02
  e0:	89 83       	std	Y+1, r24	; 0x01
	UCSRA |= (1 << U2X);
  e2:	ab e2       	ldi	r26, 0x2B	; 43
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	eb e2       	ldi	r30, 0x2B	; 43
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	8c 93       	st	X, r24
	UCSRB = (config->mode & 0b11) << TXEN;
  f0:	aa e2       	ldi	r26, 0x2A	; 42
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	eb 81       	ldd	r30, Y+3	; 0x03
  f6:	fc 81       	ldd	r31, Y+4	; 0x04
  f8:	83 81       	ldd	r24, Z+3	; 0x03
  fa:	83 70       	andi	r24, 0x03	; 3
  fc:	88 0f       	add	r24, r24
  fe:	88 0f       	add	r24, r24
 100:	88 0f       	add	r24, r24
 102:	8c 93       	st	X, r24
	UCSRC = (1 << URSEL) | ((config->parity & 0b11) << UPM0) | ((config->stopBit & 1) << USBS) | ((config->characterSize & 0b11) << UCSZ0);
 104:	a0 e4       	ldi	r26, 0x40	; 64
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	eb 81       	ldd	r30, Y+3	; 0x03
 10a:	fc 81       	ldd	r31, Y+4	; 0x04
 10c:	81 81       	ldd	r24, Z+1	; 0x01
 10e:	88 2f       	mov	r24, r24
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	83 70       	andi	r24, 0x03	; 3
 114:	90 70       	andi	r25, 0x00	; 0
 116:	82 95       	swap	r24
 118:	92 95       	swap	r25
 11a:	90 7f       	andi	r25, 0xF0	; 240
 11c:	98 27       	eor	r25, r24
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	98 27       	eor	r25, r24
 122:	28 2f       	mov	r18, r24
 124:	20 68       	ori	r18, 0x80	; 128
 126:	eb 81       	ldd	r30, Y+3	; 0x03
 128:	fc 81       	ldd	r31, Y+4	; 0x04
 12a:	82 81       	ldd	r24, Z+2	; 0x02
 12c:	88 2f       	mov	r24, r24
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	81 70       	andi	r24, 0x01	; 1
 132:	90 70       	andi	r25, 0x00	; 0
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	28 2b       	or	r18, r24
 142:	eb 81       	ldd	r30, Y+3	; 0x03
 144:	fc 81       	ldd	r31, Y+4	; 0x04
 146:	80 81       	ld	r24, Z
 148:	88 2f       	mov	r24, r24
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	83 70       	andi	r24, 0x03	; 3
 14e:	90 70       	andi	r25, 0x00	; 0
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	82 2b       	or	r24, r18
 156:	8c 93       	st	X, r24
	UBRRL = baudRate;
 158:	e9 e2       	ldi	r30, 0x29	; 41
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	80 83       	st	Z, r24
	UBRRH = (baudRate >> 8);
 160:	e0 e4       	ldi	r30, 0x40	; 64
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	9a 81       	ldd	r25, Y+2	; 0x02
 168:	89 2f       	mov	r24, r25
 16a:	99 27       	eor	r25, r25
 16c:	80 83       	st	Z, r24

}
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	cf 91       	pop	r28
 178:	df 91       	pop	r29
 17a:	08 95       	ret

0000017c <UART_sendByte>:

void UART_sendByte(const uint8 data) {
 17c:	df 93       	push	r29
 17e:	cf 93       	push	r28
 180:	0f 92       	push	r0
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA, UDRE));
 188:	eb e2       	ldi	r30, 0x2B	; 43
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	88 2f       	mov	r24, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	80 72       	andi	r24, 0x20	; 32
 194:	90 70       	andi	r25, 0x00	; 0
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	b9 f3       	breq	.-18     	; 0x188 <UART_sendByte+0xc>

	UDR = data;
 19a:	ec e2       	ldi	r30, 0x2C	; 44
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	80 83       	st	Z, r24
}
 1a2:	0f 90       	pop	r0
 1a4:	cf 91       	pop	r28
 1a6:	df 91       	pop	r29
 1a8:	08 95       	ret

000001aa <UART_receiveByte>:

uint8 UART_receiveByte(void) {
 1aa:	df 93       	push	r29
 1ac:	cf 93       	push	r28
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA, RXC));
 1b2:	eb e2       	ldi	r30, 0x2B	; 43
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	88 23       	and	r24, r24
 1ba:	dc f7       	brge	.-10     	; 0x1b2 <UART_receiveByte+0x8>

	return UDR;
 1bc:	ec e2       	ldi	r30, 0x2C	; 44
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
}
 1c2:	cf 91       	pop	r28
 1c4:	df 91       	pop	r29
 1c6:	08 95       	ret

000001c8 <UART_sendString>:

void UART_sendString(const uint8 *str) {
 1c8:	df 93       	push	r29
 1ca:	cf 93       	push	r28
 1cc:	00 d0       	rcall	.+0      	; 0x1ce <UART_sendString+0x6>
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	9a 83       	std	Y+2, r25	; 0x02
 1d4:	89 83       	std	Y+1, r24	; 0x01
 1d6:	0b c0       	rjmp	.+22     	; 0x1ee <UART_sendString+0x26>
	while(*str) UART_sendByte(*str++);
 1d8:	e9 81       	ldd	r30, Y+1	; 0x01
 1da:	fa 81       	ldd	r31, Y+2	; 0x02
 1dc:	20 81       	ld	r18, Z
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	9a 81       	ldd	r25, Y+2	; 0x02
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	9a 83       	std	Y+2, r25	; 0x02
 1e6:	89 83       	std	Y+1, r24	; 0x01
 1e8:	82 2f       	mov	r24, r18
 1ea:	0e 94 be 00 	call	0x17c	; 0x17c <UART_sendByte>
 1ee:	e9 81       	ldd	r30, Y+1	; 0x01
 1f0:	fa 81       	ldd	r31, Y+2	; 0x02
 1f2:	80 81       	ld	r24, Z
 1f4:	88 23       	and	r24, r24
 1f6:	81 f7       	brne	.-32     	; 0x1d8 <UART_sendString+0x10>
	UART_sendByte('#');
 1f8:	83 e2       	ldi	r24, 0x23	; 35
 1fa:	0e 94 be 00 	call	0x17c	; 0x17c <UART_sendByte>
}
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	cf 91       	pop	r28
 204:	df 91       	pop	r29
 206:	08 95       	ret

00000208 <UART_receiveString>:

void UART_receiveString(uint8 *str) {
 208:	df 93       	push	r29
 20a:	cf 93       	push	r28
 20c:	00 d0       	rcall	.+0      	; 0x20e <UART_receiveString+0x6>
 20e:	00 d0       	rcall	.+0      	; 0x210 <UART_receiveString+0x8>
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
 214:	9c 83       	std	Y+4, r25	; 0x04
 216:	8b 83       	std	Y+3, r24	; 0x03
	uint8 t, i = 0;
 218:	19 82       	std	Y+1, r1	; 0x01
 21a:	0d c0       	rjmp	.+26     	; 0x236 <UART_receiveString+0x2e>
	while((t = UART_receiveByte()) != '#') str[i++] = t;
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	28 2f       	mov	r18, r24
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	8b 81       	ldd	r24, Y+3	; 0x03
 224:	9c 81       	ldd	r25, Y+4	; 0x04
 226:	fc 01       	movw	r30, r24
 228:	e2 0f       	add	r30, r18
 22a:	f3 1f       	adc	r31, r19
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	80 83       	st	Z, r24
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	89 83       	std	Y+1, r24	; 0x01
 236:	0e 94 d5 00 	call	0x1aa	; 0x1aa <UART_receiveByte>
 23a:	8a 83       	std	Y+2, r24	; 0x02
 23c:	8a 81       	ldd	r24, Y+2	; 0x02
 23e:	83 32       	cpi	r24, 0x23	; 35
 240:	69 f7       	brne	.-38     	; 0x21c <UART_receiveString+0x14>
	str[i] = '\0';
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	28 2f       	mov	r18, r24
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	8b 81       	ldd	r24, Y+3	; 0x03
 24a:	9c 81       	ldd	r25, Y+4	; 0x04
 24c:	fc 01       	movw	r30, r24
 24e:	e2 0f       	add	r30, r18
 250:	f3 1f       	adc	r31, r19
 252:	10 82       	st	Z, r1
}
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	cf 91       	pop	r28
 25e:	df 91       	pop	r29
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
