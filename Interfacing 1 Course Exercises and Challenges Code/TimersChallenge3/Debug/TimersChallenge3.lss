
TimersChallenge3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000360  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006a0  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PWM_TIMER0_init>:
 *      Author: engmo
 */
#include <avr/io.h>


void PWM_TIMER0_init(const unsigned char OCR) {
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	89 83       	std	Y+1, r24	; 0x01
	DDRB |= (1 << PB3);
  78:	a7 e3       	ldi	r26, 0x37	; 55
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	e7 e3       	ldi	r30, 0x37	; 55
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	88 60       	ori	r24, 0x08	; 8
  84:	8c 93       	st	X, r24
	TCNT0 = 0;
  86:	e2 e5       	ldi	r30, 0x52	; 82
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	10 82       	st	Z, r1
	OCR0 = OCR;
  8c:	ec e5       	ldi	r30, 0x5C	; 92
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	80 83       	st	Z, r24
	TCNT0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
  94:	e2 e5       	ldi	r30, 0x52	; 82
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	8a e6       	ldi	r24, 0x6A	; 106
  9a:	80 83       	st	Z, r24
	SREG |= 1 << 7;
  9c:	af e5       	ldi	r26, 0x5F	; 95
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	ef e5       	ldi	r30, 0x5F	; 95
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	8c 93       	st	X, r24
}
  aa:	0f 90       	pop	r0
  ac:	cf 91       	pop	r28
  ae:	df 91       	pop	r29
  b0:	08 95       	ret

000000b2 <main>:

int main (void) {
  b2:	df 93       	push	r29
  b4:	cf 93       	push	r28
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
	PWM_TIMER0_init(128);
  ba:	80 e8       	ldi	r24, 0x80	; 128
  bc:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_TIMER0_init>
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0xe>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
